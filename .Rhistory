SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa)^2)
detKoef<-(SSreg/SYY)
detKoef
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa)^2)
detKoef<-(SSreg/SYY)
detKoef
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa)^2)
detKoef<-(SSreg/SYY)
detKoef
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
warnings()
# erregrezio zuzenetik 10.5 balioa aztertu
predict(erregrezioZuzena, newdata= data.frame(x=10.5))
SSReg = 0
for(i in 1:35)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
detKoef<-(SSreg/SYY)
detKoef
detKoef<-(SSreg/SYY)
detKoef
detKoef<-(SSreg/SYY)
detKoef
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
warnings()
# 1 atala
setwd("C:/Users/urtat/OneDrive/Escritorio/EMI Proiektua Urtats Berrocal")
# datuak irakurri
datuak = read.table("datuak.csv", header =TRUE)
# 100 m probaren emaitzak eskuratu
emaitzak100m = datuak$X100m
sortedEmaitzak100m = sort(emaitzak100m)
# Aldagai jarraituak dauzkagu
laginTamaina = length(sortedEmaitzak100m)
# chi-karratua ondo amoldatuko da kasu honetara
# Bataz bestekoa
batazbesteko100m = mean(sortedEmaitzak100m)
# mediana
mediana100m = sortedEmaitzak100m[round(laginTamaina / 2)]
# Motelena
motelena = sortedEmaitzak100m[1]
# Kuartilak
Q1 = sortedEmaitzak100m[ round(laginTamaina * 0.25)]
Q2 = sortedEmaitzak100m[ round(laginTamaina * 0.50)]
Q3 = sortedEmaitzak100m[ round(laginTamaina * 0.75)]
# Erregela enpirikoa tresna baliagarria da datu-banaketaren mediana kalkulatzeko, haren ausazko lagin batean oinarrituta.
# Hala ere, arau hau soilik aplikatzen da datuen banaketak kanpai forma duenean, banaketa normala bezala.
# Datuen banaketak forma hori ez badu, banaketa txi-karratu baten kasuan bezala, erregela enpirikoa ez da aplikatzen eta beste teknika batzuk datuen mediana kalkulatzeko erabili behar dira.
# Beraz, kasu honetan, ezin dugu arau enpirikoa aplikatu, datuen banaketak ez baititu betetzen hura aplikatzeko beharrezko baldintzak.
# 2 zatia
# Coges una por una las columnas de lsos datos y luego las muestras en graficos
emaitzak100m
luzeraJausia = datuak$LuzeraJauzia
PisuJaurtiketa = datuak$PisuJaurtiketa
AltueraJauzia = datuak$AltueraJauzia
X400m = datuak$X400m
X110mHesi = datuak$X110mHesi
DiskoJaurtiketa = datuak$DiskoJaurtiketa
PertikaJausia = datuak$PertikaJauzia
Xabalina = datuak$Xabalina
X1500m = datuak$X1500m
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(luzeraJausia, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(PisuJaurtiketa, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(AltueraJauzia, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(X400m, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(X110mHesi, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(DiskoJaurtiketa, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(PertikaJausia, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(Xabalina, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(X1500m, col= "blue")
par(mfrow=c(1,1))
# grafikoei ikusita dirudi ez dagoela korrelaziorik
# Bakoitzarekiko correlazio bilatuko dugu
korrelazioBektorea = c(cor(emaitzak100m,luzeraJausia),
cor(emaitzak100m,PisuJaurtiketa),
cor(emaitzak100m,AltueraJauzia),
cor(emaitzak100m,X400m),
cor(emaitzak100m,X110mHesi),
cor(emaitzak100m,DiskoJaurtiketa),
cor(emaitzak100m,PertikaJausia),
cor(emaitzak100m,Xabalina),
cor(emaitzak100m,X1500m))
korrelazioBektorea
# Diruedinez  korrikarekin erlazioa daukaten probak korrelazio handiago bat dago, bestalde besteekin ya es dago erlazioa edo erlazio negatiboa dago
# datuak gorde data frame batean
dataframe = data.frame(x=emaitzak100m, y=luzeraJausia)
# errregrezio zuzena kalkulatu
erregrezioZuzena = lm(y ~ x^2, data = dataframe)
# erregrezio zuzenetik 10.5 balioa aztertu
predict(erregrezioZuzena, newdata= data.frame(x=10.5))
# Puntu hodeia eta erregrezio zuzena marraztu
plot( dataframe$x, dataframe$y, xlab='x100m', ylab='LuzeeraJauzia')
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
# errregrezio zuzena kalkulatu
erregrezioZuzena = lm(y ~ x^2, data = dataframe)
# erregrezio zuzenetik 10.5 balioa aztertu
predict(erregrezioZuzena, newdata= data.frame(x=10.5))
# Puntu hodeia eta erregrezio zuzena marraztu
plot( dataframe$x, dataframe$y, xlab='x100m', ylab='LuzeeraJauzia')
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregresioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
# 1 atala
setwd("C:/Users/urtat/OneDrive/Escritorio/EMI Proiektua Urtats Berrocal")
# datuak irakurri
datuak = read.table("datuak.csv", header =TRUE)
# 100 m probaren emaitzak eskuratu
emaitzak100m = datuak$X100m
sortedEmaitzak100m = sort(emaitzak100m)
# Aldagai jarraituak dauzkagu
laginTamaina = length(sortedEmaitzak100m)
# chi-karratua ondo amoldatuko da kasu honetara
# Bataz bestekoa
batazbesteko100m = mean(sortedEmaitzak100m)
# mediana
mediana100m = sortedEmaitzak100m[round(laginTamaina / 2)]
# Motelena
motelena = sortedEmaitzak100m[1]
# Kuartilak
Q1 = sortedEmaitzak100m[ round(laginTamaina * 0.25)]
Q2 = sortedEmaitzak100m[ round(laginTamaina * 0.50)]
Q3 = sortedEmaitzak100m[ round(laginTamaina * 0.75)]
# Erregela enpirikoa tresna baliagarria da datu-banaketaren mediana kalkulatzeko, haren ausazko lagin batean oinarrituta.
# Hala ere, arau hau soilik aplikatzen da datuen banaketak kanpai forma duenean, banaketa normala bezala.
# Datuen banaketak forma hori ez badu, banaketa txi-karratu baten kasuan bezala, erregela enpirikoa ez da aplikatzen eta beste teknika batzuk datuen mediana kalkulatzeko erabili behar dira.
# Beraz, kasu honetan, ezin dugu arau enpirikoa aplikatu, datuen banaketak ez baititu betetzen hura aplikatzeko beharrezko baldintzak.
# 2 zatia
# Coges una por una las columnas de lsos datos y luego las muestras en graficos
emaitzak100m
luzeraJausia = datuak$LuzeraJauzia
PisuJaurtiketa = datuak$PisuJaurtiketa
AltueraJauzia = datuak$AltueraJauzia
X400m = datuak$X400m
X110mHesi = datuak$X110mHesi
DiskoJaurtiketa = datuak$DiskoJaurtiketa
PertikaJausia = datuak$PertikaJauzia
Xabalina = datuak$Xabalina
X1500m = datuak$X1500m
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(luzeraJausia, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(PisuJaurtiketa, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(AltueraJauzia, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(X400m, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(X110mHesi, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(DiskoJaurtiketa, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(PertikaJausia, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(Xabalina, col= "blue")
plot(emaitzak100m, col = "red")
par(new=TRUE)
plot(X1500m, col= "blue")
par(mfrow=c(1,1))
# grafikoei ikusita dirudi ez dagoela korrelaziorik
# Bakoitzarekiko correlazio bilatuko dugu
korrelazioBektorea = c(cor(emaitzak100m,luzeraJausia),
cor(emaitzak100m,PisuJaurtiketa),
cor(emaitzak100m,AltueraJauzia),
cor(emaitzak100m,X400m),
cor(emaitzak100m,X110mHesi),
cor(emaitzak100m,DiskoJaurtiketa),
cor(emaitzak100m,PertikaJausia),
cor(emaitzak100m,Xabalina),
cor(emaitzak100m,X1500m))
korrelazioBektorea
# Diruedinez  korrikarekin erlazioa daukaten probak korrelazio handiago bat dago, bestalde besteekin ya es dago erlazioa edo erlazio negatiboa dago
# datuak gorde data frame batean
dataframe = data.frame(x=emaitzak100m, y=luzeraJausia)
# errregrezio zuzena kalkulatu
erregrezioZuzena = lm(y ~ x^2, data = dataframe)
# erregrezio zuzenetik 10.5 balioa aztertu
predict(erregrezioZuzena, newdata= data.frame(x=10.5))
# Puntu hodeia eta erregrezio zuzena marraztu
plot( dataframe$x, dataframe$y, xlab='x100m', ylab='LuzeeraJauzia')
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSReg = 0
for(i in 1:laginTamaina)
{
kalkulua = predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa
SSreg = SSreg + (kalkulua * kalkulua)
}
detKoef<-(SSreg/SYY)
detKoef
SSreg = 0
SSreg = 0
for(i in 1:laginTamaina)
{
predikzioa = predict(erregrezioZuzena, newdata = data.frame(x = c(0, i)))
kalkulua = predikzioa - luzeraJausiarenBatazBestekoa
SSreg = SSreg + kalkulua*kalkulua
}
jaflsdj  = (SSreg / SSy)
jaflsdj  = (SSreg / SYY)
jaflsdj
# 100 m probaren emaitzak eskuratu
emaitzak100m = datuak$X100m
setwd("C:/Users/urtat/OneDrive/Escritorio/EMI Proiektua Urtats Berrocal")
# datuak irakurri
datuak = read.table("datuak.csv", header =TRUE)
# 100 m probaren emaitzak eskuratu
emaitzak100m = datuak$X100m
luzeraJausia = datuak$LuzeraJauzia
# Diruedinez  korrikarekin erlazioa daukaten probak korrelazio handiago bat dago, bestalde besteekin ya es dago erlazioa edo erlazio negatiboa dago
# datuak gorde data frame batean
dataframe = data.frame(x=emaitzak100m, y=luzeraJausia)
# errregrezio zuzena kalkulatu
erregrezioZuzena = lm(y ~ x^2, data = dataframe)
# erregrezio zuzenetik 10.5 balioa aztertu
predict(erregrezioZuzena, newdata= data.frame(x=10.5))
# Puntu hodeia eta erregrezio zuzena marraztu
plot( dataframe$x, dataframe$y, xlab='x100m', ylab='LuzeeraJauzia')
abline(erregrezioZuzena, col="red")
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSreg = 0
SSreg = 0
for(i in 1:laginTamaina)
SSreg = 0
for(i in 1:laginTamaina)
SSreg = 0
for(i in 1:length(luzeraJausia))
{
predikzioa = predict(erregrezioZuzena, newdata = data.frame(x = i))
kalkulua = predikzioa - luzeraJausiarenBatazBestekoa
SSreg = SSreg + kalkulua*kalkulua
}
jaflsdj  = (SSreg / SYY)
jaflsdj
SSreg = sum(luzeraJausiarenBatazBestekoa)
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = 10)) - luzeraJausia)^2)
33 / 4
SSreg / SYY
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausia)^2)
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia[i] - predict(erregrezioZuzena, newdata = data.frame(x = i)))^2) + sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa)^2)
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausia)^2)
SSreg / SYYç
SSreg / SYY
RSS = sum((luzeraJausia[i] - predict(erregrezioZuzena, newdata = data.frame(x = i)))^2)
SYY = RSS + sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausiarenBatazBestekoa)^2)
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = i)) - luzeraJausia)^2)
SSreg / SYY
luzeraJausiarenBatazBestekoa = mean(luzeraJausia)
SYY = sum((luzeraJausia - luzeraJausiarenBatazBestekoa)^2)
SSreg = sum((predict(erregrezioZuzena, newdata = data.frame(x = luzeraJausia)) - luzeraJausiarenBatazBestekoa)^2)
# Calcular la suma de cuadrados total (SYY)
SYY <- sum((luzeraJausia - mean(luzeraJausia))^2)
# Calcular la suma de cuadrados de regresión (SSReg)
predicciones <- predict(erregrezioZuzena, newdata = data.frame(x = luzeraJausia))
SSReg <- sum((predicciones - mean(luzeraJausia))^2)
# Calcular el coeficiente de determinación (R^2)
R2 <- SSReg/SYY
print(R2)
SSReg <- sum(( predict(erregrezioZuzena, newdata = data.frame(x = luzeraJausia)) - mean(luzeraJausia))^2)
# Calcular el coeficiente de determinación (R^2)
R2 <- SSReg/SYY
print(R2)
luzeraJausiaBB<-mean(luzeraJausia)
SYY <-sum((luzeraJausia-luzeraJausiaBB)^2)
SSreg <- sum((fitted(erregrezioZuzena) - luzeraJausiaBB)^2)
detKoef1<-(SSreg/SYY)
detKoef1
motelena = sortedEmaitzak100m[laginTamaina]
setwd("C:/Users/urtat/OneDrive/Escritorio/EMI Proiektua Urtats Berrocal")
# datuak irakurri
datuak = read.table("datuak.csv", header =TRUE)
# 100 m probaren emaitzak eskuratu
emaitzak100m = datuak$X100m
sortedEmaitzak100m = sort(emaitzak100m)
# Aldagai jarraituak dauzkagu
laginTamaina = length(sortedEmaitzak100m)
azkarrena = sortedEmaitzak100m[laginTamaina]
azkarrenaIzena = match(azkarrena, emaitzak100m)
setwd("C:/Users/urtat/OneDrive/Escritorio/EMI Proiektua Urtats Berrocal")
# datuak irakurri
datuak = read.table("datuak.csv", header =TRUE)
# 100 m probaren emaitzak eskuratu
emaitzak100m = datuak$X100m
sortedEmaitzak100m = sort(emaitzak100m)
# Aldagai jarraituak dauzkagu
laginTamaina = length(sortedEmaitzak100m)
# chi-karratua ondo amoldatuko da kasu honetara
# Bataz bestekoa
batazbesteko100m = mean(sortedEmaitzak100m)
# mediana
mediana100m = sortedEmaitzak100m[round(laginTamaina / 2)]
# Azkarrena
azkarrena = sortedEmaitzak100m[laginTamaina]
azkarrenaIzena = match(azkarrena, emaitzak100m)
# Kuartilak
Q1 = sortedEmaitzak100m[ round(laginTamaina * 0.25)]
Q2 = sortedEmaitzak100m[ round(laginTamaina * 0.50)]
Q3 = sortedEmaitzak100m[ round(laginTamaina * 0.75)]
# Erregela enpirikoa tresna baliagarria da datu-banaketaren mediana kalkulatzeko, haren ausazko lagin batean oinarrituta.
# Hala ere, arau hau soilik aplikatzen da datuen banaketak kanpai forma duenean, banaketa normala bezala.
# Datuen banaketak forma hori ez badu, banaketa txi-karratu baten kasuan bezala, erregela enpirikoa ez da aplikatzen eta beste teknika batzuk datuen mediana kalkulatzeko erabili behar dira.
# Beraz, kasu honetan, ezin dugu arau enpirikoa aplikatu, datuen banaketak ez baititu betetzen hura aplikatzeko beharrezko baldintzak.
motelena = sortedEmaitzak100m[1]
motelenaID = match(motelena, emaitzak100m)
motelena = sortedEmaitzak100m[1]
motelenaID = match(motelena, emaitzak100m)
